$version Generated by VerilatedVcd $end
$date Thu Nov 24 10:52:50 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 0 ALUctrl [2:0] $end
  $var wire  1 1 ALUsrc $end
  $var wire  1 . EQ $end
  $var wire 32 4 ImmExt [31:0] $end
  $var wire  2 2 ImmSrc [1:0] $end
  $var wire 32 - PC [31:0] $end
  $var wire  1 3 PCsrc $end
  $var wire  1 / RegWrite $end
  $var wire  1 , clk $end
  $scope module control $end
   $var wire  3 0 ALUctrl [2:0] $end
   $var wire  1 1 ALUsrc $end
   $var wire  1 . EQ $end
   $var wire 32 4 ImmExt [31:0] $end
   $var wire  2 2 ImmSrc [1:0] $end
   $var wire 32 - PC [31:0] $end
   $var wire  1 3 PCsrc $end
   $var wire  1 / RegWrite $end
   $var wire  1 , clk $end
   $var wire 32 % ins [31:0] $end
   $scope module cu $end
    $var wire  2 ) ALUOp [1:0] $end
    $var wire  3 0 ALUctrl [2:0] $end
    $var wire  1 1 ALUsrc $end
    $var wire  1 * Branch $end
    $var wire  1 . EQ $end
    $var wire  2 2 ImmSrc [1:0] $end
    $var wire  7 & Op [6:0] $end
    $var wire  1 3 PCsrc $end
    $var wire  1 / RegWrite $end
    $var wire  3 ' funct3 [2:0] $end
    $var wire  1 ( funct7_5 $end
    $scope module ALUdec $end
     $var wire  2 ) ALUOp [1:0] $end
     $var wire  3 0 ALUctrl [2:0] $end
     $var wire  3 ' funct3 [2:0] $end
     $var wire  1 ( funct7_5 $end
    $upscope $end
    $scope module MAINdec $end
     $var wire  2 ) ALUOp [1:0] $end
     $var wire  1 1 ALUsrc $end
     $var wire  7 ; AUIPC [6:0] $end
     $var wire  7 : BRANCH [6:0] $end
     $var wire  1 * Branch $end
     $var wire  7 6 I_AL [6:0] $end
     $var wire  2 2 ImmSrc [1:0] $end
     $var wire  7 = JAL [6:0] $end
     $var wire  7 7 JALR [6:0] $end
     $var wire  7 5 LOAD [6:0] $end
     $var wire  7 < LUI [6:0] $end
     $var wire  7 & Op [6:0] $end
     $var wire  7 9 REG [6:0] $end
     $var wire  1 / RegWrite $end
     $var wire  7 8 STORE [6:0] $end
    $upscope $end
   $upscope $end
   $scope module ext32 $end
    $var wire 32 4 ImmExt [31:0] $end
    $var wire  2 2 ImmSrc [1:0] $end
    $var wire 32 > OUT_WIDTH [31:0] $end
    $var wire 25 + msb25 [31:7] $end
   $upscope $end
   $scope module rom $end
    $var wire 32 - A [31:0] $end
    $var wire 32 > ADDRESS_WIDTH [31:0] $end
    $var wire 32 ? DATA_WIDTH [31:0] $end
    $var wire 32 % RD [31:0] $end
    $var wire  8 # rom_array[-1] [7:0] $end
    $var wire  8 $ rom_array[0] [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000000000000000000000000000 %
b0000000 &
b000 '
0(
b00 )
0*
b0000000000000000000000000 +
1,
b00000000000000000000000000000000 -
1.
0/
b000 0
01
b00 2
03
b00000000000000000000000000000000 4
b0000011 5
b0010011 6
b1100111 7
b0100011 8
b0110011 9
b1100011 :
b0010111 ;
b0110111 <
b1101111 =
b00000000000000000000000000100000 >
b00000000000000000000000000001000 ?
