$version Generated by VerilatedVcd $end
$date Thu Nov 24 15:28:17 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 1 ALUctrl [2:0] $end
  $var wire  1 2 ALUsrc $end
  $var wire  1 / EQ $end
  $var wire 32 5 ImmExt [31:0] $end
  $var wire  2 3 ImmSrc [1:0] $end
  $var wire 32 . PC [31:0] $end
  $var wire  1 4 PCsrc $end
  $var wire  1 0 RegWrite $end
  $var wire  1 - clk $end
  $scope module control $end
   $var wire  3 1 ALUctrl [2:0] $end
   $var wire  1 2 ALUsrc $end
   $var wire  1 / EQ $end
   $var wire 32 5 ImmExt [31:0] $end
   $var wire  2 3 ImmSrc [1:0] $end
   $var wire 32 . PC [31:0] $end
   $var wire 32 $ PC1 [31:0] $end
   $var wire  1 4 PCsrc $end
   $var wire  1 0 RegWrite $end
   $var wire  1 - clk $end
   $var wire 32 # ins [31:0] $end
   $scope module cu $end
    $var wire  2 ( ALUOp [1:0] $end
    $var wire  3 1 ALUctrl [2:0] $end
    $var wire  1 2 ALUsrc $end
    $var wire  1 ) Branch $end
    $var wire  1 / EQ $end
    $var wire  2 3 ImmSrc [1:0] $end
    $var wire  1 * NEG $end
    $var wire  7 % Op [6:0] $end
    $var wire  1 4 PCsrc $end
    $var wire  1 0 RegWrite $end
    $var wire  3 & funct3 [2:0] $end
    $var wire  1 ' funct7_5 $end
    $scope module ALUdec $end
     $var wire  2 ( ALUOp [1:0] $end
     $var wire  3 1 ALUctrl [2:0] $end
     $var wire  3 & funct3 [2:0] $end
     $var wire  1 ' funct7_5 $end
    $upscope $end
    $scope module MAINdec $end
     $var wire  2 ( ALUOp [1:0] $end
     $var wire  1 2 ALUsrc $end
     $var wire  7 < AUIPC [6:0] $end
     $var wire  7 ; BRANCH [6:0] $end
     $var wire  1 ) Branch $end
     $var wire  7 7 I_AL [6:0] $end
     $var wire  2 3 ImmSrc [1:0] $end
     $var wire  7 > JAL [6:0] $end
     $var wire  7 8 JALR [6:0] $end
     $var wire  7 6 LOAD [6:0] $end
     $var wire  7 = LUI [6:0] $end
     $var wire  7 % Op [6:0] $end
     $var wire  7 : REG [6:0] $end
     $var wire  1 0 RegWrite $end
     $var wire  7 9 STORE [6:0] $end
    $upscope $end
   $upscope $end
   $scope module ext32 $end
    $var wire 32 5 ImmExt [31:0] $end
    $var wire  2 3 ImmSrc [1:0] $end
    $var wire 32 ? OUT_WIDTH [31:0] $end
    $var wire 25 + msb25 [31:7] $end
   $upscope $end
   $scope module rom $end
    $var wire 20 , A [19:0] $end
    $var wire 32 @ ADDRESS_WIDTH [31:0] $end
    $var wire 32 A DATA_WIDTH [31:0] $end
    $var wire 32 # RD [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b0000000 %
b000 &
0'
b00 (
0)
0*
b0000000000000000000000000 +
b00000000000000000000 ,
0-
b00000000000000000000000000000000 .
1/
00
b000 1
02
b00 3
04
b00000000000000000000000000000000 5
b0000011 6
b0010011 7
b1100111 8
b0100011 9
b0110011 :
b1100011 ;
b0010111 <
b0110111 =
b1101111 >
b00000000000000000000000000100000 ?
b00000000000000000000000000010100 @
b00000000000000000000000000001000 A
#1
1-
12
#2
0-
#3
1-
#4
0-
#5
1-
#6
0-
#7
1-
#8
0-
#9
1-
#10
0-
#11
1-
#12
0-
b00000000000000000000000000000100 .
#13
b00001111111100000000001100010011 #
b00000000000000000000000000000100 $
b0010011 %
b10 (
b0000111111110000000000110 +
b00000000000000000100 ,
1-
10
b00000000000000000000000011111111 5
#14
0-
b00000000000000000000000000001000 .
#15
b00000000000000000000010100010011 #
b00000000000000000000000000001000 $
b0000000000000000000001010 +
b00000000000000001000 ,
1-
b00000000000000000000000000000000 5
#16
0-
b00000000000000000000000000001100 .
#17
b00000000000000000000010110010011 #
b00000000000000000000000000001100 $
b0000000000000000000001011 +
b00000000000000001100 ,
1-
#18
0-
b00000000000000000000000000010000 .
#19
b00000000000001011000010100010011 #
b00000000000000000000000000010000 $
b0000000000000101100001010 +
b00000000000000010000 ,
1-
#20
0-
b00000000000000000000000000010100 .
#21
b00000000000101011000010110010011 #
b00000000000000000000000000010100 $
b0000000000010101100001011 +
b00000000000000010100 ,
1-
b00000000000000000000000000000001 5
#22
0-
b00000000000000000000000000011000 .
#23
b11111110011001011001100011100011 #
b00000000000000000000000000011000 $
b1100011 %
b001 &
1'
b01 (
1)
1*
b1111111001100101100110001 +
b00000000000000011000 ,
1-
00
b001 1
b10 3
b11111111111111111111111111110000 5
#24
0-
b00000000000000000000000000011100 .
#25
b11111110000000110001000011100011 #
b00000000000000000000000000011100 $
b1111111000000011000100001 +
b00000000000000011100 ,
1-
b11111111111111111111111111100000 5
#26
0-
b00000000000000000000000000100000 .
#27
b11111110010000100000101011100011 #
b00000000000000000000000000100000 $
b000 &
0*
b1111111001000010000010101 +
b00000000000000100000 ,
1-
14
b11111111111111111111111111110100 5
#28
0-
b00000000000000000000000000100100 .
#29
b00000000000000000000000000000000 #
b00000000000000000000000000100100 $
b0000000 %
0'
b00 (
0)
b0000000000000000000000000 +
b00000000000000100100 ,
1-
b000 1
b00 3
04
b00000000000000000000000000000000 5
#30
0-
b00000000000000000000000000101000 .
#31
b00000000000000000000000000101000 $
b00000000000000101000 ,
1-
